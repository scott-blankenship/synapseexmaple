{
	"name": "D365 Create All Objects",
	"properties": {
		"activities": [
			{
				"name": "Get Raw Entity Schema",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "Set variable1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "JsonSource",
						"additionalColumns": [
							{
								"name": "filePath",
								"value": "$$FILEPATH"
							}
						],
						"storeSettings": {
							"type": "AzureBlobFSReadSettings",
							"recursive": true,
							"modifiedDatetimeStart": {
								"value": "@addDays(utcNow(),-365)",
								"type": "Expression"
							},
							"wildcardFolderPath": {
								"value": "@activity('Get Root Folder from Key Vault').output.value",
								"type": "Expression"
							},
							"wildcardFileName": "*.cdm.json",
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "JsonReadSettings"
						}
					},
					"sink": {
						"type": "ParquetSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings",
							"copyBehavior": "MergeFiles"
						},
						"formatSettings": {
							"type": "ParquetWriteSettings"
						}
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"mappings": [
							{
								"source": {
									"path": "['name']"
								},
								"sink": {
									"name": "name",
									"type": "String"
								}
							},
							{
								"source": {
									"path": "['dataType']"
								},
								"sink": {
									"name": "dataType",
									"type": "String"
								}
							},
							{
								"source": {
									"path": "['isNullable']"
								},
								"sink": {
									"name": "isNullable",
									"type": "Boolean"
								}
							},
							{
								"source": {
									"path": "['displayName']"
								},
								"sink": {
									"name": "displayName",
									"type": "String"
								}
							},
							{
								"source": {
									"path": "['maximumLength']"
								},
								"sink": {
									"name": "maximumLength",
									"type": "Int32"
								}
							},
							{
								"source": {
									"path": "['dataFormat']"
								},
								"sink": {
									"name": "dataFormat",
									"type": "String"
								}
							},
							{
								"source": {
									"path": "$['filePath']"
								},
								"sink": {
									"name": "filePath",
									"type": "String"
								}
							}
						],
						"collectionReference": "$['definitions'][0]['hasAttributes']",
						"mapComplexValuesToString": true
					}
				},
				"inputs": [
					{
						"referenceName": "ds_d365_json",
						"type": "DatasetReference",
						"parameters": {
							"Container": "dynamics365-financeandoperations",
							"Path": "x",
							"FileName": "x",
							"StorageAccountURL": {
								"value": "@activity('Get Storage Account URL from Key Vault').output.value",
								"type": "Expression"
							}
						}
					}
				],
				"outputs": [
					{
						"referenceName": "DS_D365_PARQUET",
						"type": "DatasetReference",
						"parameters": {
							"Container": "dynamics365-financeandoperations",
							"Path": {
								"value": "@concat(activity('Get Root Folder from Key Vault').output.value,'/Temp/EntitySchema')",
								"type": "Expression"
							},
							"FileName": "EntityAttributes_raw.parquet",
							"StorageAccountURL": {
								"value": "@activity('Get Storage Account URL from Key Vault').output.value",
								"type": "Expression"
							}
						}
					}
				]
			},
			{
				"name": "Get Raw Entity Data Types",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "Set variable1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "JsonSource",
						"additionalColumns": [
							{
								"name": "filePath",
								"value": "$$FILEPATH"
							}
						],
						"storeSettings": {
							"type": "AzureBlobFSReadSettings",
							"recursive": true,
							"modifiedDatetimeStart": {
								"value": "@addDays(utcNow(),-365)",
								"type": "Expression"
							},
							"wildcardFolderPath": {
								"value": "@activity('Get Root Folder from Key Vault').output.value",
								"type": "Expression"
							},
							"wildcardFileName": "*.cdm.json",
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "JsonReadSettings"
						}
					},
					"sink": {
						"type": "ParquetSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings",
							"copyBehavior": "MergeFiles"
						},
						"formatSettings": {
							"type": "ParquetWriteSettings"
						}
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"mappings": [
							{
								"source": {
									"path": "['explanation']"
								},
								"sink": {
									"name": "explanation",
									"type": "String"
								}
							},
							{
								"source": {
									"path": "['dataTypeName']"
								},
								"sink": {
									"name": "dataTypeName",
									"type": "String"
								}
							},
							{
								"source": {
									"path": "['extendsDataType']"
								},
								"sink": {
									"name": "extendsDataType",
									"type": "String"
								}
							},
							{
								"source": {
									"path": "$['filePath']"
								},
								"sink": {
									"name": "filePath",
									"type": "String"
								}
							}
						],
						"collectionReference": "$['definitions']",
						"mapComplexValuesToString": true
					}
				},
				"inputs": [
					{
						"referenceName": "ds_d365_json",
						"type": "DatasetReference",
						"parameters": {
							"Container": "dynamics365-financeandoperations",
							"Path": "x",
							"FileName": "x",
							"StorageAccountURL": {
								"value": "@activity('Get Storage Account URL from Key Vault').output.value",
								"type": "Expression"
							}
						}
					}
				],
				"outputs": [
					{
						"referenceName": "DS_D365_PARQUET",
						"type": "DatasetReference",
						"parameters": {
							"Container": "dynamics365-financeandoperations",
							"Path": {
								"value": "@concat(activity('Get Root Folder from Key Vault').output.value,'/Temp/EntitySchema')",
								"type": "Expression"
							},
							"FileName": "EntityAttributeDataTypes_raw.parquet",
							"StorageAccountURL": {
								"value": "@activity('Get Storage Account URL from Key Vault').output.value",
								"type": "Expression"
							}
						}
					}
				]
			},
			{
				"name": "Get Raw Backing Elements",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "Set variable1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "JsonSource",
						"additionalColumns": [
							{
								"name": "filePath",
								"value": "$$FILEPATH"
							}
						],
						"storeSettings": {
							"type": "AzureBlobFSReadSettings",
							"recursive": true,
							"modifiedDatetimeStart": {
								"value": "@addDays(utcNow(),-365)",
								"type": "Expression"
							},
							"wildcardFolderPath": {
								"value": "@activity('Get Root Folder from Key Vault').output.value",
								"type": "Expression"
							},
							"wildcardFileName": "*.cdm.json",
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "JsonReadSettings"
						}
					},
					"sink": {
						"type": "ParquetSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings",
							"copyBehavior": "MergeFiles"
						},
						"formatSettings": {
							"type": "ParquetWriteSettings"
						}
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"mappings": [
							{
								"source": {
									"path": "['arguments'][0]['name']"
								},
								"sink": {
									"name": "name",
									"type": "String"
								}
							},
							{
								"source": {
									"path": "['arguments'][0]['value']"
								},
								"sink": {
									"name": "value",
									"type": "String"
								}
							},
							{
								"source": {
									"path": "$['filePath']"
								},
								"sink": {
									"name": "filePath",
									"type": "String"
								}
							}
						],
						"collectionReference": "$['definitions'][0]['exhibitsTraits']",
						"mapComplexValuesToString": true
					}
				},
				"inputs": [
					{
						"referenceName": "ds_d365_json",
						"type": "DatasetReference",
						"parameters": {
							"Container": "dynamics365-financeandoperations",
							"Path": "x",
							"FileName": "x",
							"StorageAccountURL": {
								"value": "@activity('Get Storage Account URL from Key Vault').output.value",
								"type": "Expression"
							}
						}
					}
				],
				"outputs": [
					{
						"referenceName": "DS_D365_PARQUET",
						"type": "DatasetReference",
						"parameters": {
							"Container": "dynamics365-financeandoperations",
							"Path": {
								"value": "@concat(activity('Get Root Folder from Key Vault').output.value,'/Temp/EntitySchema')",
								"type": "Expression"
							},
							"FileName": "EntityBackingElements_raw.parquet",
							"StorageAccountURL": {
								"value": "@activity('Get Storage Account URL from Key Vault').output.value",
								"type": "Expression"
							}
						}
					}
				]
			},
			{
				"name": "Create EntityAttributes_raw",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Get Raw Entity Schema",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "@concat('\nIF OBJECT_ID(''tmp.EntityAttributes_raw'', ''U'') IS NOT NULL \nDROP EXTERNAL TABLE [tmp].[EntityAttributes_raw]\n\nSET ANSI_NULLS ON\nSET QUOTED_IDENTIFIER OFF\n\nCREATE EXTERNAL TABLE [tmp].[EntityAttributes_raw]\n(\n\t[name] [nvarchar](255),\n\t[dataType] [nvarchar](255),\n\t[isNullable] [varchar](5),\n\t[displayName] varchar(255),\n\t[maximumLength] int,\n\tdataFormat varchar(255),\n\tfilePath varchar(255)\n)\nWITH (DATA_SOURCE = [D365DataLakeGen2DFS],LOCATION = N''',activity('Get Root Folder from Key Vault').output.value,'/Temp/EntitySchema/EntityAttributes_raw.parquet'',FILE_FORMAT = [PARQUET]);\n\nSELECT 1 as Result\n')",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "DS_ASQLDB",
						"type": "DatasetReference",
						"parameters": {
							"ServerName": {
								"value": "@activity('Get OnDemand ServerName from Key Vault').output.value",
								"type": "Expression"
							},
							"DatabaseName": "D365",
							"SchemaName": "x",
							"TableName": "x"
						}
					}
				}
			},
			{
				"name": "Create EntityAttributeDataTypes_raw",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Get Raw Entity Data Types",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "@concat('\nIF OBJECT_ID(''tmp.EntityAttributeDataTypes_raw'', ''U'') IS NOT NULL \nDROP EXTERNAL TABLE [tmp].[EntityAttributeDataTypes_raw]\n\nSET ANSI_NULLS ON\nSET QUOTED_IDENTIFIER OFF\n\nCREATE EXTERNAL TABLE [tmp].[EntityAttributeDataTypes_raw]\n(\n\t[dataTypeName] [nvarchar](255),\n\t[extendsDataType] [nvarchar](MAX),\n\tfilePath varchar(255)\n)\nWITH (DATA_SOURCE = [D365DataLakeGen2DFS],LOCATION = N''',activity('Get Root Folder from Key Vault').output.value,'/Temp/EntitySchema/EntityAttributeDataTypes_raw.parquet'',FILE_FORMAT = [PARQUET]);\n\nSELECT 1 as Result\n')",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "DS_ASQLDB",
						"type": "DatasetReference",
						"parameters": {
							"ServerName": {
								"value": "@activity('Get OnDemand ServerName from Key Vault').output.value",
								"type": "Expression"
							},
							"DatabaseName": "D365",
							"SchemaName": "x",
							"TableName": "x"
						}
					}
				}
			},
			{
				"name": "Create EntityBackingElements_raw",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Get Raw Backing Elements",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "@concat('\nIF OBJECT_ID(''tmp.EntityBackingElements_raw'', ''U'') IS NOT NULL \nDROP EXTERNAL TABLE [tmp].[EntityBackingElements_raw]\n\nSET ANSI_NULLS ON\nSET QUOTED_IDENTIFIER OFF\n\nCREATE EXTERNAL TABLE [tmp].[EntityBackingElements_raw]\n(\n\t[name] [nvarchar](255),\n\t[value] [nvarchar](MAX),\n\tfilePath varchar(255)\n)\nWITH (DATA_SOURCE = [D365DataLakeGen2DFS],LOCATION = N''',activity('Get Root Folder from Key Vault').output.value,'/Temp/EntitySchema/EntityBackingElements_raw.parquet'',FILE_FORMAT = [PARQUET]);\n\nSELECT 1 as Result\n')",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "DS_ASQLDB",
						"type": "DatasetReference",
						"parameters": {
							"ServerName": {
								"value": "@activity('Get OnDemand ServerName from Key Vault').output.value",
								"type": "Expression"
							},
							"DatabaseName": "D365",
							"SchemaName": "x",
							"TableName": "x"
						}
					}
				}
			},
			{
				"name": "Get OnDemand ServerName from Key Vault",
				"type": "WebActivity",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"url": {
						"value": "@concat(pipeline().parameters.KVURL,'secrets/D365OnDemandSqlServerName?api-version=7.0')",
						"type": "Expression"
					},
					"connectVia": {
						"referenceName": "AutoResolveIntegrationRuntime",
						"type": "IntegrationRuntimeReference"
					},
					"method": "GET",
					"authentication": {
						"type": "MSI",
						"resource": "https://vault.azure.net"
					}
				}
			},
			{
				"name": "Get ServerName from Key Vault",
				"type": "WebActivity",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"url": {
						"value": "@concat(pipeline().parameters.KVURL,'secrets/D365SqlServerName?api-version=7.0')",
						"type": "Expression"
					},
					"connectVia": {
						"referenceName": "AutoResolveIntegrationRuntime",
						"type": "IntegrationRuntimeReference"
					},
					"method": "GET",
					"authentication": {
						"type": "MSI",
						"resource": "https://vault.azure.net"
					}
				}
			},
			{
				"name": "Get Storage Account URL from Key Vault",
				"type": "WebActivity",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"url": {
						"value": "@concat(pipeline().parameters.KVURL,'secrets/D365StorageAccountURL?api-version=7.0')",
						"type": "Expression"
					},
					"connectVia": {
						"referenceName": "AutoResolveIntegrationRuntime",
						"type": "IntegrationRuntimeReference"
					},
					"method": "GET",
					"authentication": {
						"type": "MSI",
						"resource": "https://vault.azure.net"
					}
				}
			},
			{
				"name": "Get Root Folder from Key Vault",
				"type": "WebActivity",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"url": {
						"value": "@concat(pipeline().parameters.KVURL,'secrets/D365RootFolder?api-version=7.0')",
						"type": "Expression"
					},
					"connectVia": {
						"referenceName": "AutoResolveIntegrationRuntime",
						"type": "IntegrationRuntimeReference"
					},
					"method": "GET",
					"authentication": {
						"type": "MSI",
						"resource": "https://vault.azure.net"
					}
				}
			},
			{
				"name": "Get EntityAttributes_raw",
				"type": "GetMetadata",
				"dependsOn": [
					{
						"activity": "Create EntityAttributes_raw",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Create EntityAttributeDataTypes_raw",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Create EntityBackingElements_raw",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "DS_D365_PARQUET",
						"type": "DatasetReference",
						"parameters": {
							"Container": "dynamics365-financeandoperations",
							"Path": {
								"value": "@concat(activity('Get Root Folder from Key Vault').output.value,'/Temp/EntitySchema')",
								"type": "Expression"
							},
							"FileName": "EntityAttributes_raw.parquet",
							"StorageAccountURL": {
								"value": "@activity('Get Storage Account URL from Key Vault').output.value",
								"type": "Expression"
							}
						}
					},
					"fieldList": [
						"size"
					],
					"storeSettings": {
						"type": "AzureBlobFSReadSettings",
						"recursive": true,
						"enablePartitionDiscovery": false
					},
					"formatSettings": {
						"type": "ParquetReadSettings"
					}
				}
			},
			{
				"name": "ForEach Entitiy",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Get Distinct Entities",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Get Distinct Entities').output.value",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Get DDL Command",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "Capture Schema",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "@concat('SELECT Cmd FROM [tmp].[ExtTableCmds] WHERE ObjectName = ''',item().objectName,''' AND ObjectType = ''',item().objectType,''' AND IsErrorState = 0')",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "DS_ASQLDB",
									"type": "DatasetReference",
									"parameters": {
										"ServerName": {
											"value": "@activity('Get ServerName from Key Vault').output.value",
											"type": "Expression"
										},
										"DatabaseName": "D365",
										"SchemaName": "x",
										"TableName": "x"
									}
								}
							}
						},
						{
							"name": "EXEC DDL Command",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "Get DDL Command",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "sys.sp_executesql",
								"storedProcedureParameters": {
									"stmt": {
										"value": {
											"value": "@if(equals(item().objectType,'Entities'),'SELECT 1',activity('Get DDL Command').output.firstRow.Cmd)",
											"type": "Expression"
										},
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "LS_ASQLDB",
								"type": "LinkedServiceReference",
								"parameters": {
									"ServerName": {
										"value": "@activity('Get OnDemand ServerName from Key Vault').output.value",
										"type": "Expression"
									},
									"DatabaseName": "D365"
								}
							}
						},
						{
							"name": "Capture Schema",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderStoredProcedureName": "[meta].[TableRepresentationsParse]",
									"storedProcedureParameters": {
										"FilePath": {
											"type": "String",
											"value": {
												"value": "@item().filePath",
												"type": "Expression"
											}
										},
										"ObjectName": {
											"type": "String",
											"value": {
												"value": "@item().objectName",
												"type": "Expression"
											}
										},
										"ObjectType": {
											"type": "String",
											"value": {
												"value": "@item().objectType",
												"type": "Expression"
											}
										},
										"RootFolder": {
											"type": "String",
											"value": {
												"value": "@activity('Get Root Folder from Key Vault').output.value",
												"type": "Expression"
											}
										}
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"sink": {
									"type": "ParquetSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "ParquetWriteSettings"
									}
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "DS_ASQLDB",
									"type": "DatasetReference",
									"parameters": {
										"ServerName": {
											"value": "@activity('Get ServerName from Key Vault').output.value",
											"type": "Expression"
										},
										"DatabaseName": "D365",
										"SchemaName": "x",
										"TableName": "x"
									}
								}
							],
							"outputs": [
								{
									"referenceName": "DS_D365_PARQUET",
									"type": "DatasetReference",
									"parameters": {
										"Container": "dynamics365-financeandoperations",
										"Path": {
											"value": "@concat(activity('Get Root Folder from Key Vault').output.value,'/SchemaHistory/',string(utcNow('yyyy')),'/',string(utcNow('MM')),'/',string(utcNow('dd')))",
											"type": "Expression"
										},
										"FileName": {
											"value": "@concat(item().objectType,'_',item().objectName,'.parquet')",
											"type": "Expression"
										},
										"StorageAccountURL": {
											"value": "@activity('Get Storage Account URL from Key Vault').output.value",
											"type": "Expression"
										}
									}
								}
							]
						}
					]
				}
			},
			{
				"name": "Get Distinct Entities",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Get EntityAttributes_raw",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "[meta].[GetTablesForObjectCreation]",
						"storedProcedureParameters": {
							"FileSize": {
								"type": "Int32",
								"value": {
									"value": "@activity('Get EntityAttributes_raw').output.size",
									"type": "Expression"
								}
							},
							"TableList": {
								"type": "String",
								"value": {
									"value": "@pipeline().parameters.TableName",
									"type": "Expression"
								}
							}
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "DS_ASQLDB",
						"type": "DatasetReference",
						"parameters": {
							"ServerName": {
								"value": "@activity('Get OnDemand ServerName from Key Vault').output.value",
								"type": "Expression"
							},
							"DatabaseName": "D365",
							"SchemaName": "x",
							"TableName": "x"
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "Set variable1",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Get OnDemand ServerName from Key Vault",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Get ServerName from Key Vault",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Get Storage Account URL from Key Vault",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Get Root Folder from Key Vault",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "Var",
					"value": "just using this for flow control"
				}
			}
		],
		"parameters": {
			"KVURL": {
				"type": "string",
				"defaultValue": "https://dj-test-key-core-01.vault.azure.net/"
			},
			"TableName": {
				"type": "string",
				"defaultValue": "nothing"
			}
		},
		"variables": {
			"Var": {
				"type": "String"
			}
		},
		"folder": {
			"name": "D365"
		},
		"annotations": []
	}
}